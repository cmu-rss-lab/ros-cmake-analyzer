[project]
name = "ros-cmake-analyzer"
version = "0.1.0"
description = "A static analysis tool for CMakeLists.txt files in ROS packages."
authors = [
    { name = "Chris Timperley", email = "christimperley@googlemail.com" },
    { name = "Bradley Schmerl", email = "schmerl@cs.cmu.edu" },
]
requires-python = "~=3.10"
readme = "README.md"
dependencies = [
    "flake8-comprehensions>=3.14.0,<4",
    "flake8-use-fstring~=1.4",
    "loguru>=0.7.2,<0.8",
    "pyparsing>=3.1.1,<4",
    "defusedxml>=0.7.1,<0.8",
    "charset-normalizer==3.3.2",
]

[dependency-groups]
dev = [
    "mypy>=1.7.0,<2",
    "pytest>=7.4.3,<8",
    "pytest-cov>=4.1.0,<5",
    "ruff>=0.1.6,<0.2",
    "nox>=2023.4.22,<2024",
    "types-defusedxml==0.7.0.20240218",
]

[tool.hatch.build.targets.sdist]
include = ["src/ros_cmake_analyzer"]

[tool.hatch.build.targets.wheel]
include = ["src/ros_cmake_analyzer"]

[tool.hatch.build.targets.wheel.sources]
"src/ros_cmake_analyzer" = "ros_cmake_analyzer"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
ignore_missing_imports = false
strict = true
exclude = ["src/ros_cmake_analyzer/core/package_xml/", "src/ros_cmake_analyzer/cmake_parser/"]

[[tool.mypy.overrides]]
module = "ros_cmake_analyzer.cmake_parser.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py312"
src = ["src"]

[tool.ruff.lint]
select = [
    "ALL",  # includes all rules (including new ones)
]
extend-ignore = [
    "ANN101",   # missing type annotation for 'self' in method
    "ANN102",   # missing type annotation for 'cls' in classmethod
    "B024",     # use of abstract base class without abstract methods
    "D100",     # missing docstring in public module
    "D101",     # missing docstring in public class
    "D102",     # missing docstring in public method
    "D103",     # missing docstring in public function
    "D104",     # missing docstring in public package
    "D105",     # missing docstring in magic method
    "D203",     # one-blank-line-before-class
    "D213",     # multi-line-summary-second-line
    "D401",     # first line of docstring should be in imperative mood
    "D413",     # missing blank line after last section
    "FIX001",   # unresolved FIXME
    "FIX002",   # TODO found
    "TD001",    # invalid TODO tag: `FIXME`
    "TD002",    # missing author in TODO
    "TD003",    # missing issue link on line following TODO
    "TD004",    # missing colon in TODO
    "TRY003",   # avoid specifying long messages outside the exception class
    "S101",     # use of assertions
    "SLF001",   # private member accessed
    "T201",     # use of print
    "D204",     # 1 blank line required after class docstring
    "C901",     # function is too complex (cyclomatic complexity)
    "PLR0912",  # too many branches
    "PGH003",   # use specific rule codes when ignoring type issues
    "FBT001",   # boolean typed positional argument in function definition
    "ARG001",   # unused function argument
    "PLR0913",  # too many arguments in function definition
    "PLR0911",  # too many return statements
    "PTH118",   # `os.path.join()` should be replaced by `Path` with `/` operator
    "S604",     # function call with `shell=True` parameter identified, security issue
    "S602",     # subprocess call with shell=True identified, security issue
    "D107",     # missing docstring in `__init__`
    "N818",     # exception name should be named with an Error suffix
    "PTH117",   # `os.path.isabs()` should be replaced by `Path.is_absolute()`
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
]
